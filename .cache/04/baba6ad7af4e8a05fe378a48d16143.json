{"id":"javascript/shaders/matcap/vertex.glsl","dependencies":[{"name":"/Users/nielskonrad/Development/dev-konrad/land/src/javascript/shaders/partials/easeSin.glsl","includedInParent":true,"mtime":1602671021044},{"name":"/Users/nielskonrad/Development/dev-konrad/land/package.json","includedInParent":true,"mtime":1602671021005}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\n#define TOTO\\n#define MATCAP\\n#define USE_MATCAP\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n    varying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\n// Custom start\\nuniform float uRevealProgress;\\n\\nvarying vec3 vWorldPosition;\\n\\n#define M_PI 3.1415926535897932384626433832795\\n\\nfloat easeSin(float _value)\\n{\\n    return sin((_value - 0.5) * M_PI) * 0.5 + 0.5;\\n}\\n\\n// Custom end\\n\\nvoid main() {\\n\\n    #include <uv_vertex>\\n\\n    #include <beginnormal_vertex>\\n    #include <morphnormal_vertex>\\n    #include <skinbase_vertex>\\n    #include <skinnormal_vertex>\\n    #include <defaultnormal_vertex>\\n\\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n        vNormal = normalize( transformedNormal );\\n\\n    #endif\\n\\n    #include <begin_vertex>\\n    #include <morphtarget_vertex>\\n    #include <skinning_vertex>\\n    #include <displacementmap_vertex>\\n\\n    // Custom start\\n    vec4 worldNormal = modelMatrix * vec4(normal, 1.0);\\n\\n    vec4 worldPosition = modelMatrix * vec4(transformed, 1.0);\\n\\n    // Reveal\\n    float distanceToCenter = length(worldPosition);\\n    float zAmplitude = 3.2;\\n    float revealProgress = (uRevealProgress - distanceToCenter / 30.0) * 5.0;\\n    revealProgress = 1.0 - clamp(revealProgress, - 0.1, 1.0);\\n    revealProgress = pow(revealProgress, 2.0);\\n    if(uRevealProgress > 0.9)\\n    {\\n        revealProgress = 0.0;\\n    }\\n    worldPosition.z -= revealProgress * zAmplitude;\\n\\n    // Update varying\\n    vWorldPosition = worldPosition.xyz;\\n\\n    vec4 mvPosition = viewMatrix * worldPosition;\\n    gl_Position = projectionMatrix * mvPosition;\\n    // Custom end\\n\\n    // #include <project_vertex>\\n\\n    #include <logdepthbuf_vertex>\\n    #include <clipping_planes_vertex>\\n    #include <fog_vertex>\\n\\n    vViewPosition = - mvPosition.xyz;\\n\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"javascript/shaders/matcap/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"javascript/shaders/matcap/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"javascript/shaders/matcap/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"javascript/shaders/matcap/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"javascript/shaders/matcap/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":2124},"source":"javascript/shaders/matcap/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"javascript/shaders/matcap/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\n#define TOTO\\n#define MATCAP\\n#define USE_MATCAP\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n    varying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\n// Custom start\\nuniform float uRevealProgress;\\n\\nvarying vec3 vWorldPosition;\\n\\n#define M_PI 3.1415926535897932384626433832795\\n\\nfloat easeSin(float _value)\\n{\\n    return sin((_value - 0.5) * M_PI) * 0.5 + 0.5;\\n}\\n\\n// Custom end\\n\\nvoid main() {\\n\\n    #include <uv_vertex>\\n\\n    #include <beginnormal_vertex>\\n    #include <morphnormal_vertex>\\n    #include <skinbase_vertex>\\n    #include <skinnormal_vertex>\\n    #include <defaultnormal_vertex>\\n\\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n        vNormal = normalize( transformedNormal );\\n\\n    #endif\\n\\n    #include <begin_vertex>\\n    #include <morphtarget_vertex>\\n    #include <skinning_vertex>\\n    #include <displacementmap_vertex>\\n\\n    // Custom start\\n    vec4 worldNormal = modelMatrix * vec4(normal, 1.0);\\n\\n    vec4 worldPosition = modelMatrix * vec4(transformed, 1.0);\\n\\n    // Reveal\\n    float distanceToCenter = length(worldPosition);\\n    float zAmplitude = 3.2;\\n    float revealProgress = (uRevealProgress - distanceToCenter / 30.0) * 5.0;\\n    revealProgress = 1.0 - clamp(revealProgress, - 0.1, 1.0);\\n    revealProgress = pow(revealProgress, 2.0);\\n    if(uRevealProgress > 0.9)\\n    {\\n        revealProgress = 0.0;\\n    }\\n    worldPosition.z -= revealProgress * zAmplitude;\\n\\n    // Update varying\\n    vWorldPosition = worldPosition.xyz;\\n\\n    vec4 mvPosition = viewMatrix * worldPosition;\\n    gl_Position = projectionMatrix * mvPosition;\\n    // Custom end\\n\\n    // #include <project_vertex>\\n\\n    #include <logdepthbuf_vertex>\\n    #include <clipping_planes_vertex>\\n    #include <fog_vertex>\\n\\n    vViewPosition = - mvPosition.xyz;\\n\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"dc8f21df131b5470ac3819d0b2373cef","cacheData":{"env":{}}}