{"id":"javascript/shaders/areaFloorBorder/fragment.glsl","dependencies":[{"name":"/Users/nielskonrad/Development/dev-konrad/land/package.json","includedInParent":true,"mtime":1577395582694}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\n#define M_PI 3.1415926535897932384626433832795\\n\\nuniform vec3 uColor;\\nuniform float uAlpha;\\nuniform float uLoadProgress;\\nuniform float uProgress;\\n\\nvarying vec3 vPosition;\\n\\nvoid main()\\n{\\n    float angle = atan(vPosition.x, vPosition.y);\\n    float loadProgress = step(abs(angle / M_PI), uLoadProgress);\\n    float progress = step(1.0 - abs(angle / M_PI), uProgress);\\n\\n    float alpha = uAlpha;\\n    alpha -= uAlpha * 0.5 * (1.0 - loadProgress);\\n    alpha *= progress;\\n\\n    gl_FragColor = vec4(uColor, alpha);\\n    // gl_FragColor = vec4(vec3(progress), 1.0);\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"javascript/shaders/areaFloorBorder/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"javascript/shaders/areaFloorBorder/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"javascript/shaders/areaFloorBorder/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"javascript/shaders/areaFloorBorder/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"javascript/shaders/areaFloorBorder/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":615},"source":"javascript/shaders/areaFloorBorder/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"javascript/shaders/areaFloorBorder/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\n#define M_PI 3.1415926535897932384626433832795\\n\\nuniform vec3 uColor;\\nuniform float uAlpha;\\nuniform float uLoadProgress;\\nuniform float uProgress;\\n\\nvarying vec3 vPosition;\\n\\nvoid main()\\n{\\n    float angle = atan(vPosition.x, vPosition.y);\\n    float loadProgress = step(abs(angle / M_PI), uLoadProgress);\\n    float progress = step(1.0 - abs(angle / M_PI), uProgress);\\n\\n    float alpha = uAlpha;\\n    alpha -= uAlpha * 0.5 * (1.0 - loadProgress);\\n    alpha *= progress;\\n\\n    gl_FragColor = vec4(uColor, alpha);\\n    // gl_FragColor = vec4(vec3(progress), 1.0);\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"3dc0d185f0fd5018b2b5530e478cc3ae","cacheData":{"env":{}}}